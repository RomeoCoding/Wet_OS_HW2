Control flow so far in wet OS homework 2
Misc.
We have the error_handler.cpp/hpp and logger.cpp/hpp
They’re singletons as there should be only one object of each used by the system as a whole. The logger has methods for logging command executions, and error_handler uses it (creates certain messages that get sent to the logger, and they get logged using istream). 
They’re called in bank methods that execute commands (e.g. deposit, withdraw, etc… depending on whether the command succeeded or failed for w/e reason, the file logs the result accordingly).
Control flow
1.	Main function creates an instance of a Bank object that shall be used throughout the program. In the bank constructor we initialize the threads for periodic functions (like snapshots, withdrawals, and printing). We also initialize the main bank account, the account list, atm list, etc
2.	Input file paths are extracted from the program argument array, and are put in a vector
3.	The atms are initialized using a bank method (initialise_atms())
4.	There, we create atm object pointers (by calling the atm constructor with input file path and id and making it a unique pointer), and store them in a vector belonging to the bank object 
5.	We call start_atm_threads()
6.	start_atm_threads() is a bank method. It creates a thread for each atm so they work concurrently, pushes the thread into an atm_thread vector belonging to bank, initializing each thread with an entry point atm_thread_function()
7.	atm_thread_function() is a static void* method in bank which basically “sends” each atm thread to work. It calls process_atm_commands which is in process_handler, which processes the commands within the input file  belonging to each respective atm. 
8.	Process_atm_commands takes into consideration persistent commands. No vip functionality for now (28.12.2024), however
9.	Once every thread is finished with its file, they’re joined together. And once they all join, the main returns and all is done

